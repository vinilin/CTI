INCLUDE (CheckIncludeFiles)
INCLUDE (CheckTypeSize)

MACRO(GHCA_INTTYPES_CONFIG NAMESPACE TARGET_FILE)

	STRING(REPLACE "." "_" TYPE_PREFIX ${NAMESPACE})
	
	STRING(TOUPPER "${TYPE_PREFIX}" TYPE_PREFIX_UPPER)
	
	STRING(REPLACE "." "{ namespace " CXX_NAMESPACE_BEGIN ${NAMESPACE})
	
	STRING(REGEX REPLACE "[_a-zA-z][_a-zA-z]*\\." "}" CXX_NAMESPACE_END_1 ${NAMESPACE})
	
	STRING(REGEX REPLACE "[_a-zA-z][_a-zA-z]*" "}" CXX_NAMESPACE_END ${CXX_NAMESPACE_END_1})

	CHECK_INCLUDE_FILES(inttypes.h  ${TYPE_PREFIX_UPPER}_HAVE_INTTYPES_H)
	
	IF(NOT ${TYPE_PREFIX_UPPER}_HAVE_INTTYPES_H)
		
		SET(SBYTE_T "__int8")
		
		SET(BYTE_T "unsigned __int8")
		
		SET(INT16_T "__int16")
		
		SET(UINT16_T "unsigned __int16")
		
		SET(INT32_T "__int32")
		
		SET(UINT32_T "unsigned __int32")
		
		SET(INT64_T "__int64")
		
		SET(UINT64_T "unsigned __int64")
		
	ELSE()
		
		SET(SBYTE_T "int8_t")
		
		SET(BYTE_T "uint8_t")
		
		SET(INT16_T "int16_t")
		
		SET(UINT16_T "uint16_t")
		
		SET(INT32_T "int32_t")
		
		SET(UINT32_T "uint32_t")
		
		SET(INT64_T "int64_t")
		
		SET(UINT64_T "uint64_t")
		
	ENDIF()
	
	IF(${TYPE_PREFIX_UPPER}_HAVE_INTTYPES_H)
		
		SET(CMAKE_EXTRA_INCLUDE_FILES inttypes.h)
		
	ENDIF()
	
	CHECK_TYPE_SIZE(${SBYTE_T} INT8_T_SIZEOF)
	
	IF(NOT ${INT8_T_SIZEOF} EQUAL 1)
		MESSAGE(FATAL_ERROR "not found int8_t")
	ENDIF()
	
	CHECK_TYPE_SIZE(${BYTE_T} UINT8_T_SIZEOF)
	
	IF(NOT ${UINT8_T_SIZEOF} EQUAL 1)
		MESSAGE(FATAL_ERROR "not found uint8_t")
	ENDIF()
	
	CHECK_TYPE_SIZE(${INT16_T} INT16_T_SIZEOF)
	
	IF(NOT ${INT16_T_SIZEOF} EQUAL 2)
		MESSAGE(FATAL_ERROR "not found int16_t")
	ENDIF()
	
	CHECK_TYPE_SIZE(${UINT16_T} UINT16_T_SIZEOF)
	
	IF(NOT ${UINT16_T_SIZEOF} EQUAL 2)
		MESSAGE(FATAL_ERROR "not found uint16_t")
	ENDIF()
	
	CHECK_TYPE_SIZE(${INT32_T} INT32_T_SIZEOF)
	
	IF(NOT ${INT32_T_SIZEOF} EQUAL 4)
		MESSAGE(FATAL_ERROR "not found int32_t")
	ENDIF()
	
	CHECK_TYPE_SIZE(${UINT32_T} UINT32_T_SIZEOF)
	
	IF(NOT ${UINT32_T_SIZEOF} EQUAL 4)
		MESSAGE(FATAL_ERROR "not found int32_t")
	ENDIF()
	
	CHECK_TYPE_SIZE(${INT64_T} INT64_T_SIZEOF)
	
	IF(NOT ${INT64_T_SIZEOF} EQUAL 8)
		MESSAGE(FATAL_ERROR "not found int64_t")
	ENDIF()
	
	CHECK_TYPE_SIZE(${UINT64_T} UINT64_T_SIZEOF)
	
	IF(NOT ${UINT64_T_SIZEOF} EQUAL 8)
		MESSAGE(FATAL_ERROR "not found uint64_t")
	ENDIF()
	
	
	
	
	
	IF(${TYPE_PREFIX_UPPER}_HAVE_INTTYPES_H)
		
		SET(CMAKE_EXTRA_INCLUDE_FILES)
		
	ENDIF()
	
	
	
	CONFIGURE_FILE(${CMAKE_MODULE_PATH}/inttypes.h.in ${TARGET_FILE} IMMEDIATE)
	
	
ENDMACRO(GHCA_INTTYPES_CONFIG)


MACRO(GHCA_CONFIG NAMESPACE VERSION PATH)

	TRY_RUN(
			GHCA_LIB_CONFIG_RUN 
			
			GHCA_LIB_CONFIG 
				
			${CMAKE_BINARY_DIR} 
				
			${CMAKE_SOURCE_DIR}/cmake/GhcaConfig.cpp
			
			COMPILE_OUTPUT_VARIABLE GHCA_CONFIG_COMPILE_MESSAGE
			
			RUN_OUTPUT_VARIABLE GHCA_CONFIG_MESSAGE
				
			ARGS ${NAMESPACE} ${VERSION} ${PATH}) 
				
	IF("FALSE" STREQUAL ${GHCA_LIB_CONFIG})
		MESSAGE(FATAL_ERROR "can't generate GhcaConfig.exe file:\n\t${GHCA_CONFIG_COMPILE_MESSAGE}\n")
	ENDIF()
	
	
	IF(NOT 0 EQUAL ${GHCA_LIB_CONFIG_RUN})
		MESSAGE(FATAL_ERROR "run GhcaConfig.exe error:\n\t${GHCA_CONFIG_MESSAGE}\n")
	ENDIF()
	
		
ENDMACRO(GHCA_CONFIG)


MACRO(GHCA_SOLUTION NAME)

	PROJECT(${NAME})

	IF(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
		MESSAGE(FATAL_ERROR "In-source builds are not allowed") 
	ENDIF()
	
	INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/sources/)

ENDMACRO(GHCA_SOLUTION)


MACRO(GHCA_PRJECT NAMESPACE)

	STRING(REPLACE "." "/" SUBDIR ${NAMESPACE})
	
	STRING(REPLACE "-" "_" REAL_NAMESPACE ${NAMESPACE})
	
	ADD_SUBDIRECTORY(sources/${SUBDIR})
	
ENDMACRO(GHCA_PRJECT)

MACRO(GHCA_EXE NAMESPACE VERSION)
	
	STRING(REGEX REPLACE "[-.]" "_" REAL_NAMESPACE ${NAMESPACE})
	
	STRING(TOUPPER ${REAL_NAMESPACE} UPPER_NAMESPACE)
	
	STRING(REGEX REPLACE "[.]" "_" TARGET_NAME ${NAMESPACE})
	
	GHCA_CONFIG(${REAL_NAMESPACE} ${VERSION} ${CMAKE_CURRENT_SOURCE_DIR}/configure.h)
	
	IF(MSVC)
		
		ADD_DEFINITIONS(/D "${UPPER_NAMESPACE}_BUILD")
		
		ADD_DEFINITIONS(/W4 /WX)
		
	ELSEIF(GCC)
	
		ADD_DEFINITIONS(-D ${UPPER_NAMESPACE}_BUILD)
		
		ADD_DEFINITIONS(-Wall -Wformat-security -Wformat -pedantic-errors)
		
	ELSE()
	
		MESSAGE(FATAL_ERROR "not support C/C++ compiler") 
		
	ENDIF()
	
	IF(${ARGC})
	
	
		ADD_EXECUTABLE(${TARGET_NAME} ${ARGN})
		
		INSTALL(TARGETS ${TARGET_NAME} RUNTIME DESTINATION bin)
	
	ENDIF()
	
	
ENDMACRO(GHCA_EXE NAMESPACE)




MACRO(GHCA_C_CXX_FILE FILES)
	
	FILE(GLOB RESULT  *.h *.hpp *.c *.cpp *.cxx *.cc)
	
	
	SET(${FILES} ${RESULT})

ENDMACRO()


MACRO(GHCA_STATIC_LIB NAMESPACE VERSION)
	
	STRING(REGEX REPLACE "[-.]" "_" REAL_NAMESPACE ${NAMESPACE})
	
	STRING(TOUPPER ${REAL_NAMESPACE} UPPER_NAMESPACE)
	
	STRING(REGEX REPLACE "[.]" "_" TARGET_NAME ${NAMESPACE})
	
	GHCA_CONFIG(${REAL_NAMESPACE} ${VERSION} ${CMAKE_CURRENT_SOURCE_DIR}/configure.h)
	
	IF(MSVC)
		
		ADD_DEFINITIONS(/D "${UPPER_NAMESPACE}_BUILD")
		
		ADD_DEFINITIONS(/W4 /WX)
		
	ELSEIF(GCC)
	
		ADD_DEFINITIONS(-D ${UPPER_NAMESPACE}_BUILD)
		
		ADD_DEFINITIONS(-Wall -Wformat-security -Wformat -pedantic-errors)
		
	ELSE()
	
		MESSAGE(FATAL_ERROR "not support C/C++ compiler") 
		
	ENDIF()
	
	IF(${ARGC})
	
		ADD_LIBRARY(${TARGET_NAME} ${ARGN})
		
		INSTALL(TARGETS ${TARGET_NAME} ARCHIVE DESTINATION lib)
	
	ENDIF()
	
ENDMACRO()

MACRO(GHCA_DEPENDENCIES NAME)

	STRING(REGEX REPLACE "[.]" "_" TARGET_NAME ${NAME})

	IF(${ARGC})
	
		ADD_DEPENDENCIES(${TARGET_NAME} ${ARGN})
		
		TARGET_LINK_LIBRARIES(${TARGET_NAME} ${ARGN})
			
	ENDIF()
	
ENDMACRO()
